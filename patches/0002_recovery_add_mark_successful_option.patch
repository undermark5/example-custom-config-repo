diff --git a/install/Android.bp b/install/Android.bp
index bed3bc5..2a31fff 100644
--- a/install/Android.bp
+++ b/install/Android.bp
@@ -20,6 +20,7 @@ cc_defaults {
     ],
 
     shared_libs: [
+        "android.hardware.boot@1.0",
         "libbase",
         "libbootloader_message",
         "libcrypto",
@@ -115,6 +115,7 @@
         "wipe_data.cpp",
         "wipe_device.cpp",
         "spl_check.cpp",
+        "mark_slot_successful.cpp",
     ],
 
     header_libs: [
diff --git a/install/include/install/mark_slot_successful.h b/install/include/install/mark_slot_successful.h
index e69de29..2458e3e 100644
--- a/install/include/install/mark_slot_successful.h
+++ b/install/include/install/mark_slot_successful.h
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+
+#include <functional>
+
+#include "recovery_ui/device.h"
+#include "recovery_ui/ui.h"
+
+struct selabel_handle;
+
+// Returns true on success.
+bool MarkSlotSuccessful(RecoveryUI* ui, const std::function<bool()>& confirm);
+
diff --git a/install/mark_slot_successful.cpp b/install/mark_slot_successful.cpp
index e69de29..8f04775 100644
--- a/install/mark_slot_successful.cpp
+++ b/install/mark_slot_successful.cpp
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "install/mark_slot_successful.h"
+
+#include <stdio.h>
+#include <string.h>
+#include <sys/stat.h>
+
+#include <functional>
+#include <vector>
+
+#include <android-base/file.h>
+#include <android-base/logging.h>
+#include <android-base/stringprintf.h>
+
+#include "otautil/dirutil.h"
+#include <android-base/logging.h>
+#include "recovery_utils/roots.h"
+#include "recovery_ui/ui.h"
+
+#include <android/hardware/boot/1.0/IBootControl.h>
+
+using android::sp;
+using android::hardware::boot::V1_0::IBootControl;
+using android::hardware::boot::V1_0::BoolResult;
+using android::hardware::boot::V1_0::CommandResult;
+
+bool MarkSlotSuccessful(RecoveryUI* ui, const std::function<bool()>& confirm_func) {
+
+  if (confirm_func && !confirm_func()) {
+    return false;
+  }
+
+  ui->Print("\n-- Marking slot as successful...\n");
+  bool success = false;
+
+  sp<IBootControl> module = IBootControl::getService();
+  if (module == nullptr) {
+    LOG(ERROR) << "Error getting bootctrl module.";
+    return success;
+  }
+
+  CommandResult cr;
+  uint32_t current_slot;
+  BoolResult is_successful;
+
+  current_slot = module->getCurrentSlot();
+  is_successful = module->isSlotMarkedSuccessful(current_slot);
+  if (is_successful == BoolResult::TRUE)
+    ui->Print("\n-- Slot %d is already successful\n", current_slot);
+  else{
+    ui->Print("\n-- Slot %d is NOT successful\n", current_slot);
+    module->markBootSuccessful([&cr](CommandResult result) { cr = result; });
+    if (!cr.success) {
+      LOG(ERROR) << "Error marking booted successfully: " << cr.errMsg;
+      ui->Print("\n-- Failed to mark slot %d as successful\n", current_slot);
+      success = false;
+    }
+    else {
+      LOG(INFO) << "Marked slot as successful.";
+      ui->Print("\n-- Marked slot %d as successful\n", current_slot);
+      success = true;
+    }
+  }
+
+  return success;
+}
diff --git a/recovery.cpp b/recovery.cpp
index 7675121..b945c71 100644
--- a/recovery.cpp
+++ b/recovery.cpp
@@ -51,6 +51,7 @@
 #include "install/package.h"
 #include "install/snapshot_utils.h"
 #include "install/wipe_data.h"
+#include "install/mark_slot_successful.h"
 #include "install/wipe_device.h"
 #include "otautil/boot_state.h"
 #include "otautil/error_code.h"
@@ -433,6 +434,16 @@ static Device::BuiltinAction PromptAndWait(Device* device, InstallResult status)
         }
         break;
 
+      case Device::MARK_SLOT_SUCCESSFUL: {
+        save_current_log = true;
+        std::function<bool()> confirm_func_test = [&device]() {
+          return yes_no(device, "Mark slot as successful?", "  THIS CAN NOT BE UNDONE!");
+        };
+        MarkSlotSuccessful(ui, ui->IsTextVisible() ? confirm_func_test : nullptr);
+        if (!ui->IsTextVisible()) return Device::NO_ACTION;
+        break;
+      }
+
       case Device::WIPE_DATA:
         save_current_log = true;
         if (ui->IsTextVisible()) {
diff --git a/recovery_ui/device.cpp b/recovery_ui/device.cpp
index d46df92..b638915 100644
--- a/recovery_ui/device.cpp
+++ b/recovery_ui/device.cpp
@@ -32,7 +32,7 @@ static std::vector<std::pair<std::string, Device::BuiltinAction>> g_menu_actions
   { "Enter fastboot", Device::ENTER_FASTBOOT },
   { "Apply update from ADB", Device::APPLY_ADB_SIDELOAD },
   { "Apply update from SD card", Device::APPLY_SDCARD },
-  { "Wipe data/factory reset", Device::WIPE_DATA },
+  { "Mark slot as successful", Device::MARK_SLOT_SUCCESSFUL },
   { "Wipe cache partition", Device::WIPE_CACHE },
   { "Mount /system", Device::MOUNT_SYSTEM },
   { "View recovery logs", Device::VIEW_RECOVERY_LOGS },
diff --git a/recovery_ui/include/recovery_ui/device.h b/recovery_ui/include/recovery_ui/device.h
index 76166f0..d42a0a7 100644
--- a/recovery_ui/include/recovery_ui/device.h
+++ b/recovery_ui/include/recovery_ui/device.h
@@ -63,6 +63,7 @@ class Device {
     REBOOT_RESCUE = 19,
     REBOOT_FROM_FASTBOOT = 20,
     SHUTDOWN_FROM_FASTBOOT = 21,
+    MARK_SLOT_SUCCESSFUL = 22,
   };
 
   explicit Device(RecoveryUI* ui);
